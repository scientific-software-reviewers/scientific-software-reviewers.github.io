var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/blog/welcome-to-code-review/",title:"Welcome to Code Review",description:"First post on Code Review",content:`Introducing code review for Scientific Software.
Helen Kershaw
`}),e.add({id:1,href:"/docs/welcome/",title:"Welcome",description:"Welcome to Code Review",content:""}),e.add({id:2,href:"/docs/welcome/introduction/",title:"A online tutorial for Code Review",description:"Code Review",content:`Welcome to code-review.org. This is an online tutorial for code review made possible by the Better Scientific Software Fellowship Program, funded by the Exascale Computing Project (17-SC-20-SC), a collaborative effort of the U.S. Department of Energy (DOE) Office of Science and the National Nuclear Security Administration; and by the National Science Foundation (NSF) under Grant No. 2154495.
What is the goal? # What are the main learning outcomes? # When reviewing:
Does the pull request address the issue? Are there any deal breakers that would stop you accepting the changes? Can you suggest any improvements? What is a good way to phrase your suggested improvements? Is the solution overly complicated? For an example of an overly complicated solution, see the famous fizz buzz in Tensorflow. Are the comments up to date, necessary, helpful? Would you except the pull request as it is now? Are your suggested changes must-do? nice-to-have? nitpicks? How would you communicate this? Do you spend a lot of time reviewing the code style? Is it worth having a style guide for contributors? Can you make use of an existing style guide? Or a linter? When working on your own contributions:
When putting in a pull request, how can you make it easy for a reviewer to understand what you have done? What makes a good pull request, what makes a bad pull request? Can you commit code in a way that lets someone review your code more easily? Should you separate functional changes from style changes? Would you use a tool such as commitizen to prompt yourself at commit time? Why? Why not? What prerequisite knowledge does someone need? # Ideally, this tutorial will get you started reviewing without requiring you to know any programing languages. The text exercises make no assumptions about coding knowledge. Text exercise 1 is a baking recipe. Text exercise 2 is an example of culturally specific mixup. These can occur when writing documentation for a global audience. Variations in cultural knowledge always exist and it is important to have this in mind when writing or reviewing. Text exercise 3 is some origami instructions, for some hands-on \u0026lsquo;hands-on\u0026rsquo; reviewing.
The exercises that use code are in Python and in Fortran. You can do either or both! Python is used by people across various domains by people with various scientific and non-scientific backgrounds. The python exercises will be at the \u0026ldquo;introduction to python level\u0026rdquo; found in \u0026ldquo;learn python\u0026rdquo; tutorials. Fortran has a more restricted user base in terms of which domains people work in. These domains typically have numerical code. For Fortran exercise 1, some mathematics knowledge is assumed. Fortran exercise 2 is a refactoring exercise.
Help I don\u0026rsquo;t have a GitHub account! # Part of the tutorial is getting familiar with GitHub, but setting up a GitHub account and setting up the tutorial may be a high bar to entry. One of the goals of this project is to get people looking at open source software. With this in mind, a \u0026rsquo;take-a-look\u0026rsquo; repository with the exercise issues and pull requests is available at take-a-look. You can follow along with the tutorial and read the issues and pull requests without having to run your own GitHub actions.
`}),e.add({id:3,href:"/docs/setup/",title:"Setup The Tutorial",description:"",content:""}),e.add({id:4,href:"/docs/setup/setup/",title:"Set up the tutorial on GitHub",description:`To do the tutorial exercises interactively you will need a GitHub account.
If you are not ready to setup a GitHub account and run workflows, a \u0026rsquo;take-a-look\u0026rsquo; repository with the exercise issues and pull requests is available at take-a-look. You can follow along with the tutorial and read the issues and pull requests without having to run your own GitHub actions. Skip head to the exercises.
For those working through the exercises, this setup guide will take you though forking the tutorial, enabling issues, setting read and write permissions for workflows, and switching on workflows.`,content:`To do the tutorial exercises interactively you will need a GitHub account.
If you are not ready to setup a GitHub account and run workflows, a \u0026rsquo;take-a-look\u0026rsquo; repository with the exercise issues and pull requests is available at take-a-look. You can follow along with the tutorial and read the issues and pull requests without having to run your own GitHub actions. Skip head to the exercises.
For those working through the exercises, this setup guide will take you though forking the tutorial, enabling issues, setting read and write permissions for workflows, and switching on workflows.
Fork the tutorial repository # The tutorial repository is github.com/scientific-software-reviewers/tutorial
Uncheck Copy the main branch only and click Create fork
You\u0026rsquo;ll see this message as your fork is being created:
After a few seconds you will see your fork.
Enable issues # The tutorial makes use of GitHub issues. To enable issues click the Settings tab
Scroll down to features and click Issues:
Enable read and write permissions for workflows # By default, write permissions are not enabled for workflows. Write permission is needed for the tutorial so the automated actions can be used to create pull requests.
Click the Settings tab
Then Actions -\u0026gt; General on the menu on the left
Then enable read and write permissions for workflows, and allow GitHub Actions to create and approve pull requests and click save:
Switch on Workflows # The tutorial makes use of GitHub actions to create the exercises. To enable actions, click on the Actions tab and then I understand my workflows, go ahead and enable them.
Great! You are now set to create the tutorial exercises.
`}),e.add({id:5,href:"/docs/setup/exercises/",title:"Create the Exercises",description:`There are two GitHub workflows for the tutorials.
create_exercises creates the exercises.
reset_exercises clears the exercises so you can start afresh.
Workflows # To get to the workflows, click the Actions tab
Create the Exercises # To create the exercises, click create_exercises from the menu on the left
Then click Run workflow which will bring up a pop up menu:
Choose the Language exercises. Text creates review exercises that do not require and code knowledge.`,content:`There are two GitHub workflows for the tutorials.
create_exercises creates the exercises.
reset_exercises clears the exercises so you can start afresh.
Workflows # To get to the workflows, click the Actions tab
Create the Exercises # To create the exercises, click create_exercises from the menu on the left
Then click Run workflow which will bring up a pop up menu:
Choose the Language exercises. Text creates review exercises that do not require and code knowledge. The other options are code review exercises specific to a particular programming language.
Click Run workflow to create the exercises. It make take a few seconds to start, but then you will see create_exercises queued in the list of workflows:
Once the workflow is finished, refresh the page and you will see you now have issues and pull requests:
Reset the Exercises # If you would like to close all the issues and pull requests at once, you can use the reset_exercises action. To get to the workflows, click the Actions tab
Click reset_exercises from the menu on the left
click Run workflow to open up a menu, and click the green Run workflow button:
`}),e.add({id:6,href:"/docs/exercises/",title:"Exercises",description:"",content:""}),e.add({id:7,href:"/docs/exercises/ex_intro/",title:"Tutorial Exercises",description:"Exercises for code review",content:`There are three sets of exercises, all on GitHub.
If you are not ready to setup a GitHub account and run workflows, a \u0026rsquo;take-a-look\u0026rsquo; repository with the exercise issues and pull requests is available at take-a-look. You can follow along with the tutorial and read the issues and pull requests without having to run your own GitHub actions.
For those working through the exercises, running the create_exercises workflow will generate the text, python, or Fortran exercises in your fork of the tutorial.
The exercises are in no particular order. You can start with whichever seems the most interesting/applicable to you. Each exercise consists of a GitHub issue describing a problem and a pull request which is a proposed solution to issue. Your mission is to review the proposed solution.
An issue may be a complaint from a user, a bug report, a request for a new feature. Pull requests may be from a colleague, or if your code is publicly available, from someone who uses the code.
`}),e.add({id:8,href:"/docs/exercises/navigating/",title:"Navigating the Exercises",description:"Navigating the GitHub repository",content:`We\u0026rsquo;re going to navigate between issues and pull requests using the menu across the top of the repository. I\u0026rsquo;m using the take-a-look repository to demonstrate.
Click on issues to get to the list of issues.
The issues and pull requests are labelled with the language: Text, python, Fortran.
Labels are a way to filter issues and pull requests. Typically on a repository you\u0026rsquo;ll see labels such as \u0026lsquo;Bug\u0026rsquo;, \u0026lsquo;Enhancement\u0026rsquo;, \u0026lsquo;Good First Issue\u0026rsquo;.
Try filtering the issues by label to show only the text exercises.
Let\u0026rsquo;s take a look at text: Exercise 1. Navigate to the issue by clicking on the text: Exercise 1 issue:
There are several places that show there is a pull request linked to this issue.
The pink circles in the image below show where you can find linked pull requests from an issue page. Note the actual issue numbers (#2 in this example) may be different depending on how many times you have created and reset the exercises.
Click on one of the links to get to the pull request
The pull request has a description of what has been proposed and which issue is being fixed. The take-a-look repository also has review comments. You\u0026rsquo;ll add your own review comments and suggestion to your fork of the tutorial as you work through the exercise.
`}),e.add({id:9,href:"/docs/exercises/examine-issues/",title:"Examining Issues",description:"Examining Issues",content:`An issue is a way to discuss, plan and track work on a GitHub repository.
Issues can be bugs, complaints from users, requests for new features or added functionality.
When reading though an issue,
Are there multiple problems reported in the issue? Can you confirm the issue by reading the code or documentation? Do you need to run the code to confirm the issue? Can you reproduce the problem? Each tutorial exercise has an issue describing the problem. This issue contains a link to the code under discussion, and some questions to think about when looking at the issue, the code, and the pull request.
Bonus points:
Think about how you would like people to report issues with your own code.
Would you use GitHub issues templates to prompt people to provide relevant information?
What is important information you would like to someone to give in an issue?
version of the code being used? a small example the shows the bug? screenshots of the problem? error messages? desired solution? operating system where the problem occurred (Windows, Mac, Linux)? `}),e.add({id:10,href:"/docs/exercises/examine-pull/",title:"Working with Pull requests",description:"Working with Pull requests",content:`A pull request is a proposed change.
There are a few things to look at when you first approach a pull request.
How many lines of code have been added or removed How many files have been changed How many commits were made These are circled below in pink, and these will give you an idea of how big the pull request is.
The lines of code changed is show by the green/red +/-. In this case 14 new lines, 10 lines removed:
Click on \u0026lsquo;Files changed\u0026rsquo; to see what changes are proposed in this pull request.
Each exercise has a pull request which proposes a change to the existing code. Your mission is to review these changes! You can read about the reasons for the change in the issue linked from the pull request description. The issues contain questions to think about during review.
Adding comments # Adding suggestions # Bonus points:
What makes a pull request easy to review? What makes a pull request difficult to review? `}),e.add({id:11,href:"/docs/reviewing/reviewing/",title:"Reviewing",description:"Reviewing",content:""}),e.add({id:12,href:"/docs/exercises/tldr/",title:"TL;DR",description:"quick start",content:`For each exercise:
The issue describes the problem. Read the code, does the issue describe the problem accurately?
The pull request is a solution to the issue.
Review the pull request, does the pull request fix the issue?
Add comments about what is good, what is bad. Add suggestions for code changes. Would you accept the pull request as is? If not, why not.
`}),e.add({id:13,href:"/docs/reviewing/",title:"Reviewing Tips",description:"Tips for code review",content:""}),e.add({id:14,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"How can I get involved? # Contribute a blog article Add a tutorial section Create a code review example Can I do the tutorial without a GitHub account? # Yes, follow along with the take-a-look. version. This will let you read the issues and pull requests without having to run your own GitHub actions. "}),e.add({id:15,href:"/docs/help/",title:"Help",description:"Help with common code review tasks",content:""}),e.add({id:16,href:"/blog/",title:"Blog",description:"Collecting the good, bad, and ugly parts of code review",content:""}),e.add({id:17,href:"/docs/",title:"Tutorial",description:"An online tutorial for code review",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()